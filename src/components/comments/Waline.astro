---
interface Props {
  serverURL?: string;
  lang?: string;
  dark?: string;
  emoji?: string[];
  meta?: string[];
  requiredMeta?: string[];
  reaction?: string[] | boolean;
  pageview?: boolean;
}

const {
  serverURL = "https://waline.tbedu.top",
  lang = "zh-CN",
  dark = "html[data-theme-type='dark']",
  emoji = ["https://unpkg.com/@waline/emojis@1.1.0/weibo", "https://unpkg.com/@waline/emojis@1.1.0/bilibili"],
  meta = ["nick", "mail", "link"],
  requiredMeta = [],
  reaction = [
        "/reaction/good.png",
        "/reaction/bad.png",
        "/reaction/happy.png",
        "/reaction/color.png",
        "/reaction/confuse.png",
        "/reaction/heart.png",
        "/reaction/rocket.png",
        "/reaction/eyes.png",
      ],
  pageview = false,
} = Astro.props;
---

<div id="waline-container"></div>

<style is:global>@import "@/styles/waline.scss";</style>
<!--<link rel="stylesheet" href="https://unpkg.com/@waline/client@v3/dist/waline.css" />-->
<link rel="stylesheet" href="https://unpkg.com/@waline/client@v3/dist/waline-meta.css" />

<script
  type="module"
  define:vars={{
    serverURL,
    lang,
    dark,
    emoji,
    meta,
    requiredMeta,
    reaction,
    pageview,
  }}
>
  import { init } from "https://unpkg.com/@waline/client@v3/dist/waline.js";

  let walineInstance;

  async function mountWaline() {
    if (walineInstance) {
      await walineInstance.destroy();
    }
    walineInstance = init({
      el: "#waline-container",
      serverURL,
      path: window.location.pathname.replace(/\/$/, ''),
      lang,
      dark,
      emoji,
      meta,
      requiredMeta,
      reaction,
      pageview,
    });
  }

  document.addEventListener("astro:after-swap", () => {
    mountWaline();
  });

  document.addEventListener("DOMContentLoaded", () => {
    mountWaline();
  });
</script>

<style>
  #waline-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
</style>